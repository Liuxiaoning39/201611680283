1.引入
例：
      # 正序输出单词示例2，假设确定会输入5个单词
      word1 = None
      word2 = None
      word3 = None
      word4 = None
      word5 = None

      i = 0
      while i < 5:
          word = input('请输入一个单词，回车结束')
          if word1 == None:
              word1 = word
          elif word2 == None:
              word2 = word
          elif word3 == None:
              word3 = word
          elif word4 == None:
              word4 = word
          else:
              word5 = word
          i += 1

      print(word5)
      print(word4)
      print(word3)
      print(word2)
      print(word1)
      
2.list
# 序列之list示例1

      numbers = [1, 2, 3, 4, 5]

      print(numbers[1])
      print(numbers[2])
      print(numbers[3])
      print(numbers[4])
      print(numbers[0])
      print(numbers[5])     # 错误，越界
      
***
    python语言用序列来存储一系列对象，其中每个对象对应一个从0开始的连续编号。
    list数据类型是一种序列，中文名称为列表可以存放数字、字符串等各类对象，
    存放的方式是：[对象1, 对象2, ... ,对象n]，即对象均放在[]之间，且用,分隔。
    
    本段代码中，[1, 2, 3, 4, 5]就是一个list，这个list被赋值给了numbers，于是number也成为list类型，其值就是[1, 2, 3, 4, 5]。
    序列中的对象根据其编号来进行定位，这个编号一般称为索引，取得序列某索引对象的方法是：序列名[索引]。
    如果索引没在序列的范围之内，此时取该索引位置的对象，解释器就会提示出错。一般称为索引越界。
***

# 序列之list示例2

      numbers = [1, 2, 3, 4, 5]
      n = int(input('请输入一个整数，回车结束'))

      if n in numbers:
          print('Yes,', n, 'is in numbers.')
      else:
          print('No,', n, 'is not in numbers.')

      print('--------------分割线---------------')

      if n+1 not in numbers:
          print('No,', n+1, 'is not in numbers.')
      else:
          print('Yes,', n+1, 'is in numbers.')
***
    in是python关键字，可以用来判断某个对象是否在一个序列中，
    基本格式是：对象 in 序列，构成一个条件表达式，如果对象在序列中，则表达式的值为True，否则为False。
    否定格式：对象 not in 序列，该条件表达式的值与基本格式的相反。
    其中not也是python关键字，意思是不。
    与in相关，有两个内置函数any()和all()，但常用程度远不及in。
    键入如下代码并观察运行结果。
    # 序列之list示例3
    print('any first:', any([0, 0, '', None, False]))
    print('any second:', any([0, 5, '', None, False]))
    print('all first:', all([5, 6, 'word', True]))
    print('all second:', all([5, 10, 'fake', None, True]))
    
    any(...)是python内置函数，可以用来判断某个序列中是否存在真值，如果有，就返回True，如果没有（或者序列为空）则返回False。

    all(...)是python内置函数，可以用来判断某个序列中是否均为真值，如果均是，就返回True，否则返回False。
***

# 序列之list示例5
      numbers = []  # numbers = list()
      print(numbers)

      i = 0
      while i < 9:
          numbers.append(i)
          i += 1

      i = 0
      while i < len(numbers):
          print('numbers[', i, ']=', numbers[i], sep = '')
          print(numbers)
          i += 1
***
    []是空的list，可赋值给一个对象，该对象类型即成为list，值为一个空的list：[]，
    或者用numbers = list()，两者等价。
    例1-3中words与numbers分别通过赋值语句得到了list类型以及值，这个过程称作初始化。
    
    append()是python内置函数，但与前面模块内的函数和我们先前自定义的函数不同，
    append()是list类型对象的函数，任意一个对象被初始化成list类型以后，均可以使用append()函数，
    一般将类型的函数称为方法，如append()方法。
    append()方法的功能是向一个list对象在尾部插入对象，
    用法是list对象.append(对象)，这个list对象可以是空list也可以非空，所加入对象的编号会立即得到对应位置的编号索引。
    
    len(...)是python内置函数，用法为len(iterable)，其中的参数iterable是一个序列，len函数可以返回该序列内所含元素的个数。
***
3.for循环
***
    for是python关键字，与in共同组成for循环。
    for循环从序列中依次取对象(本例中就是从words中依次取出word)，
    每取一次对象执行一次语句块，直到取完序列中最后一个元素。
    基本用法如下：
    
    for 对象 in 序列:
        语句块
        
***
例：
      for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
          print(i)

      print('-------------分隔符--------------')

      for i in range(10):
          print(i)

      print('-------------分隔符--------------')

      for i in range(10):
          print('指定循环打印10次')

***
    本段代码中的range()是一个内置函数，基本用法是在()中放置一个整数参数，如：range(n)。
    range(n)在for循环中将会被调用n次，range(n)每次均会返回一个数字，数字从0开始到n-1结束，因此其区间是[0,n)，共会返回n个数字。
***
4.循环的嵌套

#键入以下代码并观察执行结果。
      for i in range(3):
          for j in range(3):
              for k in range(2):
                  print(i, j, k, '=', i*j*k)
***
    每个for循环结构都有自己的循环体，多个for循环嵌套时，循环体内包含下一层次的for循环结构，嵌套一样依靠代码缩进来区分层次。
    与while循环一样，break关键字可以立即跳出当前层循环。
***

5.
***
      python自身内置了π及e的较为精确的数值：
    使用方法
          import math
          print(math.pi)
          print(math.e)
***

#蒙特卡洛方法求π的值

      import random

      def monte_carlo_method(n):
          inside_number = 0
          for i in range(n):
              x, y = random.random(),random.random()
              if x*x+y*y < 1:
                  inside_number += 1
          return 4*inside_number/n


      # 测试
      number = int(input('input times please:'))
      monte_carlo_method(number)



----------
***
      可以为range()函数同时设置起始和终点参数，即range(start, end)，
      调用可以依次得到[stard, end)之间的整数，起始参数如果没有给出，则默认从0开始。
      完整的range()函数还有第三个参数，即间隔，请看示例：
***
#示例：      
      for i in range(1, 100, 10):
          print(i)
      print('-----------------分隔线------------------')
      for i in range(100, 10, -10):
          print(i)
----------












